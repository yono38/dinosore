{
  "name": "express-restify-mongoose",
  "description": "Easily restify mongoose database",
  "version": "0.3.3",
  "author": {
    "name": "Florian Holzapfel",
    "email": "flo.holzapfel@gmail.com"
  },
  "homepage": "https://github.com/florianholzapfel/express-restify-mongoose",
  "keywords": [
    "ReST",
    "express",
    "restify",
    "mongodb",
    "mongoose"
  ],
  "licenses": [
    {
      "type": "The MIT License (MIT)",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "scripts": {
    "pretest": "./node_modules/.bin/jshint lib test",
    "test": "./node_modules/.bin/mocha -R spec ./test --recursive --timeout 5s"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/florianholzapfel/express-restify-mongoose.git"
  },
  "main": "./lib/express-restify-mongoose",
  "engines": {
    "node": "*"
  },
  "readmeFilename": "README.md",
  "dependencies": {
    "express": "~3.3.5",
    "mongoose": "~3.6.13"
  },
  "devDependencies": {
    "jshint": "~2.1.4",
    "mocha": "~1.12.0",
    "assertmessage": "0.0.2",
    "restify": "~2.6.0",
    "request": "~2.25.0",
    "sugar": "~1.3.9"
  },
  "readme": "# express-restify-mongoose\nThis library provides mongoose database models with a REST interface.\n\n[![Build Status](https://travis-ci.org/florianholzapfel/express-restify-mongoose.png?branch=master)](https://travis-ci.org/florianholzapfel/express-restify-mongoose)\n\n## Getting started\n\nIn your shell, install with npm:\n\n```sh\nnpm install express-restify-mongoose\n```\n\nIn your code:\n\n```javascript\nvar http = require('http');\nvar express = require('express');\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nvar restify = require('express-restify-mongoose')\n\nmongoose.connect('mongodb://localhost/database');\n\nvar Customer = new Schema({\n\tname: { type: String, required: true },\n\tcomment: { type: String }\n});\nvar CustomerModel = mongoose.model('Customer', Customer);\n\nvar Invoice = new Schema({\n    customer: { type: Schema.Types.ObjectId, ref: 'Customer' },\n\tamount: { type: Number, required: true }\n});\nvar InvoiceModel = mongoose.model('Invoice', Invoice);\n\nvar app = express();\napp.configure(function(){\n\tapp.use(express.bodyParser());\n\tapp.use(express.methodOverride());\n\trestify.serve(app, CustomerModel);\n\trestify.serve(app, InvoiceModel);\n});\n\nhttp.createServer(app).listen(3000, function() {\n\tconsole.log(\"Express server listening on port 3000\");\n});\n```\n\n```\nGET http://localhost/api/v1/Customers/count\nGET http://localhost/api/v1/Customers\nPUT http://localhost/api/v1/Customers\nPOST http://localhost/api/v1/Customers\nDELETE http://localhost/api/v1/Customers\n\nGET http://localhost/api/v1/Customers/:id\nPUT http://localhost/api/v1/Customers/:id\nPOST http://localhost/api/v1/Customers/:id\nDELETE http://localhost/api/v1/Customers/:id\n```\n\n### Query\n```\nGET http://localhost/api/v1/Customers?name=~regex\nGET http://localhost/api/v1/Customers?name=value\nGET http://localhost/api/v1/Customers?name=>value\nGET http://localhost/api/v1/Customers?name=>=value\nGET http://localhost/api/v1/Customers?name=<value\nGET http://localhost/api/v1/Customers?name=<=value\nGET http://localhost/api/v1/Customers?select=name\n```\n\n### Ordering\n```\nGET http://localhost/api/v1/Customers?order=name\nGET http://localhost/api/v1/Customers?skip=10&limit=10\n```\n\n### Populate Fields\n```\nGET http://localhost/api/v1/Invoices?populate=customer\n```\n\n## Reference\n### serve\n```\nserve(app, model, [options])\n```\n\n#### arguments\n* app - The express app\n* model - Your mongoose database model\n* options - Optional options object\n  * prefix - Some path that will be prefixed to the REST path. Defaults to ```/api```\n  * version - An API version that will be prefixed to the rest path. Defaults to ```v1```\n  * middleware - An express middleware or an array of express middlewares that will be used.\n  * plural - If ```true```, does not pluralize the database model name. Default is ```false```\n  * lowercase - If ```true```, turn model name to lower case before generating the routes.\n  * exclude - String of comma separated field names which are not to be returned by queries.\n  * postProcess - A middleware to be called after the response has been sent.\n    It is only executed on success.  If an error is sent to the client,\n    this is not executed.\n  \n## Contributors\n* Enric LeÃ³n (https://github.com/nothingbuttumbleweed)\n* David Higginbotham (https://github.com/dhigginbotham)\n* Jonathan Greenemeier (https://github.com/6eDesign)\n* Alan Levicki (https://github.com/alevicki)\n* Michael (https://github.com/micheee)\n\n## Formalia\n\n```\nCopyright (C) 2013 by Florian Holzapfel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n",
  "bugs": {
    "url": "https://github.com/florianholzapfel/express-restify-mongoose/issues"
  },
  "_id": "express-restify-mongoose@0.3.3",
  "_from": "express-restify-mongoose@"
}
